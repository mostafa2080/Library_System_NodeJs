const mongoose = require("mongoose");

const booksSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, "Why no book title? ğŸ˜­"],
    trim: true,
    minLength: [1, "Book title is too small ğŸ˜’"],
    maxLength: [100, "Book title is too big ğŸ˜£"],
  },
  author: {
    type: String,
    required: [true, "Why no author name? ğŸ˜­"],
    trim: true,
    minLength: [1, "Author name is too small ğŸ˜’"],
    maxLength: [100, "Author name is too big ğŸ˜£"],
  },
  publisher: {
    type: String,
    required: [true, "Why no publisher name? ğŸ˜­"],
    trim: true,
    minLength: [1, "Publisher name is too small ğŸ˜’"],
    maxLength: [100, "Publisher name is too big ğŸ˜£"],
  },
  dateAdded: {
    type: Date,
    required: false,
    default: Date.now,
  },
  datePublished: {
    type: Date,
    required: [true, "Enter publishing date ğŸ˜ "],
  },
  category: {
    type: String,
    required: [true, "Why no category name? ğŸ˜­"],
    trim: true,
    minLength: [1, "Category name is too small ğŸ˜’"],
    maxLength: [100, "Category name is too big ğŸ˜£"],
  },
  pagesCount: {
    type: Number,
    required: [true, "Why no pages count? ğŸ˜­"],
    min: [1, "Pages count is too small ğŸ˜’"],
    max: [1800, "Pages count is too high ğŸ˜£"],
  },
  copiesCount: {
    type: Number,
    required: [true, "Why no copies count? ğŸ˜­"],
    min: [1, "Copies count is too small ğŸ˜’"],
    max: [100, "Copies count is too big ğŸ˜£"],
  },
  isAvailable: {
    type: Boolean,
    required: [true, "Is book available or not? ğŸ¤“"],
  },
  shelfNo: {
    type: Number,
    required: [true, "What is the shelf number? ğŸ¤”"],
    min: [1, "Shelf number does not exist ğŸ˜’"],
    max: [100, "Shelf number does not exist ğŸ˜£"],
  },
});

mongoose.model("books", booksSchema);
